#!/usr/bin/env python3

# This code was generated by GitHub Copilot.
# Prompt: "Create a Python script that receives inputs like hostname, port, user, password, protocol, element1, element2, state, and servicename. 
# The script should print the provided parameters in a single line. If a parameter is not provided, indicate that the value was not provided. 
# If the port is not provided, indicate that the default port (443) is being used. The script should set the exit code based on the value of the state parameter: 
# OK -> exit code 0, WARN -> exit code 1, CRIT -> exit code 2, UNK -> exit code 3. The output should be in the format: 
# 0 "My 1st service" - This static service is always OK, where the current output should be placed in the location of 'This static service is always OK' 
# and the status code should be added at the beginning of the output. Include a help argument with usage examples."

import sys
import getopt

def usage():
    print(f"""Usage: {os.path.basename(__file__)} [-h|--help] -H hostname [-p|--port port] [-u|--user user] [-P|--password password] [-r|--protocol protocol] [-e1|--element1 element1] [-e2|--element2 element2] [-s|--state state] [-n|--servicename servicename]

    hostname        : Hostname or IP address of the server
    port            : TCP port to connect to; default: 443
    user            : Username for authentication
    password        : Password for authentication
    protocol        : Protocol to use
    element1        : First element
    element2        : Second element
    state           : State of the check (OK, WARN, CRIT, UNK); default: OK
    servicename     : Name of the service; default: "Extension Starter Pack by Paulo Santana - Active Check"

    Examples:
    1. python {os.path.basename(__file__)} -H example.com -u admin -P secret -r https -e1 1.23 -e2 4.56 -s OK -n "Service Check"
    2. python {os.path.basename(__file__)} -H example.com -p 8080 -u user -P pass -r http -e1 7.89 -e2 0.12 -s WARN -n "Another Service"
    3. python {os.path.basename(__file__)} -H example.com -u admin -P secret -r https -e1 3.14 -e2 1.59 -s CRIT -n "Critical Service"
    """)
    sys.exit(3)

def main(argv):
    hostname = 'Not provided'
    port = 443
    user = 'Not provided'
    password = 'Not provided'
    protocol = 'Not provided'
    element1 = 'Not provided'
    element2 = 'Not provided'
    state = 'OK'
    servicename = "Extension Starter Pack by Paulo Santana - Active Check"

    try:
        opts, args = getopt.getopt(argv, "hH:p:u:P:r:e1:e2:s:n:", ["help", "hostname=", "port=", "user=", "password=", "protocol=", "element1=", "element2=", "state=", "servicename="])
    except getopt.GetoptError:
        usage()

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-H", "--hostname"):
            hostname = arg
        elif opt in ("-p", "--port"):
            port = int(arg)
        elif opt in ("-u", "--user"):
            user = arg
        elif opt in ("-P", "--password"):
            password = arg
        elif opt in ("-r", "--protocol"):
            protocol = arg
        elif opt in ("-e1", "--element1"):
            element1 = arg
        elif opt in ("-e2", "--element2"):
            element2 = arg
        elif opt in ("-s", "--state"):
            state = arg
        elif opt in ("-n", "--servicename"):
            servicename = arg

    port_info = f"Port: {port} (default)" if port == 443 else f"Port: {port}"

    current_output = f"Hostname: {hostname}, {port_info}, User: {user}, Password: {password}, Protocol: {protocol}, Element1: {element1}, Element2: {element2}, State: {state}"

    if state == 'OK':
        status_code = 0
    elif state == 'WARN':
        status_code = 1
    elif state == 'CRIT':
        status_code = 2
    elif state == 'UNK':
        status_code = 3
    else:
        print("Invalid state provided. Valid states are: OK, WARN, CRIT, UNK.")
        sys.exit(3)

    print(f'{status_code} "{servicename}" - {current_output}')

    sys.exit(status_code)

if __name__ == "__main__":
    main(sys.argv[1:])