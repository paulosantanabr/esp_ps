#!/usr/bin/env python3
# Author: Paulo Santana
# Description:
# This script is a Checkmk active check plugin that receives metric arguments in the form:
# --metric_name "value;warn;crit"
# It prints a performance data line and detailed output for each metric provided.
# If no metrics are provided, it exits with code 1 and prints an informative error.

import argparse
import sys

# Function to parse input like "value;warn;crit"
def parse_metric_input(input_str):
    try:
        value_str, warn_str, crit_str = input_str.strip().split(";")
        value, warn, crit = int(value_str), int(warn_str), int(crit_str)
        return {"value": value, "warn": warn, "crit": crit}
    except Exception:
        raise argparse.ArgumentTypeError("Input must be in format value;warn;crit (e.g. 4;5;10)")

def main():
    parser = argparse.ArgumentParser(description="Custom Metrics Active Check for Checkmk")

    # Metric arguments (optional)
    parser.add_argument("--brown_dogs", type=parse_metric_input, help="brown_dogs=value;warn;crit")
    parser.add_argument("--green_cats", type=parse_metric_input, help="green_cats=value;warn;crit")
    parser.add_argument("--blue_birds", type=parse_metric_input, help="blue_birds=value;warn;crit")
    parser.add_argument("--red_fishes", type=parse_metric_input, help="red_fishes=value;warn;crit")
    parser.add_argument("--yellow_ducks", type=parse_metric_input, help="yellow_ducks=value;warn;crit")

    args = parser.parse_args()

    metrics_info = {
        "brown_dogs": args.brown_dogs,
        "green_cats": args.green_cats,
        "blue_birds": args.blue_birds,
        "red_fishes": args.red_fishes,
        "yellow_ducks": args.yellow_ducks,
    }

    # Check if any argument was provided
    if not any(metrics_info.values()):
        print("No metrics provided. Please provide at least one metric argument (e.g. --brown_dogs \"4;5;10\").")
        sys.exit(1)

    perf_data = []
    displayed_metrics = []

    # Prepare perfdata and summary
    for name, data in metrics_info.items():
        if data:
            perf_data.append(f"{name}={data['value']};{data['warn']};{data['crit']}")
            displayed_metrics.append(name.replace("_", " "))

    print(f"Custom Metrics: {', '.join(displayed_metrics)} | {' '.join(perf_data)}")

    # Detailed output
    for name, data in metrics_info.items():
        if data:
            label = name.replace("_", " ").title()
            print("===========================")
            print(f"Metric Name: {name}")
            print(f"Value: {data['value']} ({data['value']} {label})")
            print(f"Warning: {data['warn']}")
            print(f"Critical: {data['crit']}")

    print("===========================")
    print("Active Check Location: $OMD_ROOT/local/lib/python3/cmk_addons/plugins/esp_ps/libexec/check_esp_ps_active_check_custom_metrics")

if __name__ == "__main__":
    main()